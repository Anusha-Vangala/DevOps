#### Main Stack 

- name: Install web server
  hosts: all
  become: yes
  tags:
    - web
  vars:
    MODJK_URL: "http://www-eu.apache.org/dist/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.42-src.tar.gz"
  tasks:
    - name: Install web server packages
      package:
        name: "{{item}}"
        state: latest
      with_items:
        - httpd
        - httpd-devel
        - gcc
    
    - name: Start httpd service
      service:
        name: httpd
        state: started
        enabled: yes

# Commented because unarhive module can download and extract     
#    - name: Get tar file name
#      shell: "echo {{MODJK_URL}} | awk -F / '{print $NF}'"
#      register: out
    
#    - name: set tar file variable
#      set_fact:
#        MODJK_TARFILE : "/opt/{{out.stdout}}"
 
    - name: Get tar directory name
      shell: "echo {{MODJK_URL}} | awk -F / '{print $NF}' | sed -e 's/.tar.gz//'"
      register: out
      
    - name: set tar directory variable
      set_fact:
        MODJK_TARDIR : "/opt/{{out.stdout}}"

# Commented because unarhive module can download and extract        
#    - name: Download mod_jk tar file
#      get_url:
#        url: "{{MODJK_URL}}"
#        dest: "{{MODJK_TARFILE}}"
        
    - name: Extract the tar file
      unarchive:
        src: "{{MODJK_URL}}"
        dest: /opt
        remote_src: yes
   
    - name: check for /etc/httpd/modules/mod_jk.so
      stat: 
        path: /etc/httpd/modules/mod_jk.so
      register: out
      
    - name: Compile mod_jk
      shell: "./configure --with-apxs=/bin/apxs && make clean && make && make install"
      args:
        chdir: "{{MODJK_TARDIR}}/native"
      when: out.stat.exists == false
      
    - name: Copy mod_jk config file
      copy:
        src: "files/{{item}}"
        dest: "/etc/httpd/conf.d/{{item}}"
      with_items:
        - mod_jk.conf
        - workers.properties
    
- name: Install App server
  hosts: all
  become: yes
  tags:
    - app
  vars:    
    TOMCAT_URL: "http://www-us.apache.org/dist/tomcat/tomcat-9/v9.0.1/bin/apache-tomcat-9.0.1.tar.gz"
  tasks:
    - name: Install Java
      package:
        name: java
        state: latest
  
    - name: Get the tomcat directory.
      shell: "echo ${{TOMCAT_URL}} | awk -F / '{print $NF}' | sed -e 's/.tar.gz//'"
      register: out
      
    - name: set tomcat directory variable
      set_fact:
        TOMCAT_DIR: "/opt/{{out.stdout}}"      
        
    - name: Check tomcat directory exists or not
      stat:
        path: "{{TOMCAT_DIR}}"
      register: out
      
    - name: Download and extract tomcat
      unarchive:
        src: "{{TOMCAT_URL}}"
        dest: /opt
        remote_src: yes      
      when: out.stat.exists == false
        
    - name: Remove existing student files
      file:
        path: "{{TOMCAT_DIR}}/webapps/{{item}}"
        state: absent
      with_items:
        - student
        - student.war
    - name: Download student application
      get_url:
        url: "https://github.com/devopstrainings/laborare/raw/master/APPSTACK/student.war"
        dest: "{{TOMCAT_DIR}}/webapps/student.war"
  
    - name: Download MySQL jar file
      get_url:
        url: "https://github.com/carreerit/cogito/raw/master/appstack/mysql-connector-java-5.1.40.jar"
        dest: "{{TOMCAT_DIR}}/lib/mysql-connector-java-5.1.40.jar"
  
    - name: copy context.xml file
      copy:
        src: files/context.xml
        dest: "{{TOMCAT_DIR}}/conf/context.xml"
  
    - name: start tomcat service
      shell: nohup sh {{TOMCAT_DIR}}/bin/startup.sh

- name: Install DB server
  hosts: all
  become: yes
  vars:
    DBUSERNAME: studnet 
    DBPASSWORD: student@1
    DBCLIENT: localhost
  tags:
    - db
  tasks:
    - name: Install mariadb
      package:
        name: "{{item}}"
        state: latest    
      with_items:
        - mariadb-server
        - mariadb
        - MySQL-python
        
    - name: Start mariadb
      service:
        name: mariadb
        state: started
        
    - name: copy student.sql file
      template:
        src:  templates/student.sql.j2
        dest: /tmp/student.sql
        
    - name: create stuentapp DB
      mysql_db:
        name: studentapp
        state: present

    - name: run student.sql file
      mysql_db:
        state: import
        name: all
        target: /tmp/student.sql
      
      
      
      
  
    